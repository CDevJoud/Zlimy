#pragma once
#include "HitBox.h"
#include <unordered_map>
#include "box2d/box2d.h"
#include "logger.h"
#define NULLSIZE 459
namespace IExtreme::Engine::Ugr
{
	class Box2DEntity : public sf::Transformable, public sf::Drawable
	{
	public:
		enum Proprety
		{
			Static = 0, Kinematic, Dynamic
		};
		
		Box2DEntity();
		~Box2DEntity();
		void draw(sf::RenderTarget& target, sf::RenderStates states) const;
		void Update(const sf::Time& dt);

		void SetPosition(float x, float y);
		sf::Vector2f GetPosition() const;

		void AddHitBox(std::string IDHitBox, HitBox& box);
		HitBox& GetHitBox(std::string ID);

		b2Body* GetBody();
		void SetBody(b2Body* body);
		sf::Vector2f GetSize() const;

		Proprety prop;
		int ID = 0;
		/// <summary>
		/// Move The Entity and The HitBoxes Note Never Use move() it's deprecated!
		/// </summary>
		/// <param name="x"></param>
		/// <param name="y"></param>
		void Move(float x, float y);
	private:
		void UpdateTransformation();
	private:
		friend class World;
		sf::Sprite sprite;
		sf::Texture* texture = new sf::Texture();
		std::unordered_map<std::string, HitBox> hitBoxes;
		float dt = 0.0f;
		b2Body* body;
	private:
		sf::Uint8 NullData[NULLSIZE] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x3D,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x1D, 0xD5, 0x6F, 0xC1, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC,
	0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
	0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00,
	0x00, 0x01, 0x60, 0x49, 0x44, 0x41, 0x54, 0x68, 0x43, 0xE5, 0xD2, 0x21,
	0x72, 0x04, 0x41, 0x10, 0x03, 0xC1, 0xFD, 0xFF, 0xA7, 0xC7, 0xC2, 0x1D,
	0x85, 0xF3, 0x80, 0x41, 0x11, 0xA1, 0x04, 0xFA, 0xDE, 0xF7, 0xDE, 0x2F,
	0xFB, 0xBE, 0x11, 0x7E, 0xD9, 0x05, 0xE9, 0x12, 0x25, 0xBB, 0x20, 0x5D,
	0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0xEC, 0x82, 0x74, 0x89, 0x92, 0x5D,
	0x90, 0x2E, 0x51, 0xB2, 0x0B, 0xD2, 0x25, 0x4A, 0x76, 0x41, 0xBA, 0x44,
	0xC9, 0x2E, 0x48, 0x97, 0x28, 0xD9, 0x05, 0xE9, 0x12, 0x25, 0xBB, 0x20,
	0x5D, 0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0xEC, 0x82, 0x74, 0x89, 0x92,
	0x5D, 0x90, 0x2E, 0x51, 0xB2, 0x0B, 0xD2, 0x25, 0x4A, 0x76, 0x41, 0xBA,
	0x44, 0xC9, 0x2E, 0x48, 0x97, 0x28, 0xD9, 0x05, 0xE9, 0x12, 0x25, 0xBB,
	0x20, 0x5D, 0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0xEC, 0x82, 0x74, 0x89,
	0x92, 0x5D, 0x90, 0x2E, 0x51, 0xB2, 0x0B, 0xD2, 0x25, 0x4A, 0x76, 0x41,
	0xBA, 0x44, 0xC9, 0x2E, 0x48, 0x97, 0x28, 0xD9, 0x05, 0xE9, 0x12, 0x25,
	0xBB, 0x20, 0x5D, 0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0x2D, 0xC7, 0xFF,
	0x54, 0x8E, 0xAC, 0x7A, 0x85, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B,
	0xA1, 0x61, 0xAA, 0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19,
	0x1A, 0xA6, 0x2A, 0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1,
	0x61, 0xAA, 0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A,
	0xA6, 0x2A, 0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61,
	0xAA, 0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6,
	0x2A, 0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA,
	0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A,
	0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42,
	0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A, 0x94,
	0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42, 0xC9,
	0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A, 0x94, 0x6C,
	0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42, 0xC9, 0x66,
	0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A, 0x94, 0x6C, 0x86,
	0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42, 0xC9, 0x66, 0x68,
	0x98, 0xAA, 0x50, 0xAE, 0xF7, 0xFE, 0x00, 0x98, 0xAA, 0x23, 0x83, 0x2E,
	0x3C, 0x2C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,
	0x42, 0x60, 0x82
		};
	};

	class Entity : public sf::Drawable
	{
	public:
		enum Proprety
		{
			Static = 0, Dynamic
		};
		Entity();
		~Entity();

		void Clean();

		void draw(sf::RenderTarget& target, sf::RenderStates states) const;

		void SetPosition(sf::Vector2f pos);
		void SetPosition(float x, float y);
		void SetOrigin(sf::Vector2f org);
		void SetOrigin(float x, float y);
		void SetScale(sf::Vector2f scale);
		void SetScale(float x, float y);
		void SetRotation(float x);
		void SetProprety(Proprety prop);
		void SetVelocity(sf::Vector2f vel);
		void SetVelocity(float x, float y);

		Proprety GetProprety() const;
		sf::Vector2f GetPosition() const;
		sf::Vector2f GetOrigin() const;
		sf::Vector2f GetScale() const;
		sf::Vector2f GetSize() const;
		sf::Vector2f GetVelocity() const;
		float GetRotation() const;

		void Move(sf::Vector2f offset);
		void Move(float offsetx, float offsety);

		void Rotate(float rotation);

		void Scale(sf::Vector2f scale);
		void Scale(float x, float y);

		void Update(const sf::Time& dt);

		HitBox* GetHitBox();
		int ID = 0;
		friend class World;
		bool IsCollidingToGround = false;
	private:
		sf::Sprite sprite;
		sf::Texture* texture;
		sf::Vector2f velocity;
		HitBox hitBox;
		Proprety prop;
		bool UpdatePollGravitation = true;
	private:
		sf::Uint8 NullData[NULLSIZE] = {
	0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D,
	0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x3D,
	0x08, 0x06, 0x00, 0x00, 0x00, 0x1D, 0xD5, 0x6F, 0xC1, 0x00, 0x00, 0x00,
	0x01, 0x73, 0x52, 0x47, 0x42, 0x00, 0xAE, 0xCE, 0x1C, 0xE9, 0x00, 0x00,
	0x00, 0x04, 0x67, 0x41, 0x4D, 0x41, 0x00, 0x00, 0xB1, 0x8F, 0x0B, 0xFC,
	0x61, 0x05, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00,
	0x0E, 0xC3, 0x00, 0x00, 0x0E, 0xC3, 0x01, 0xC7, 0x6F, 0xA8, 0x64, 0x00,
	0x00, 0x01, 0x60, 0x49, 0x44, 0x41, 0x54, 0x68, 0x43, 0xE5, 0xD2, 0x21,
	0x72, 0x04, 0x41, 0x10, 0x03, 0xC1, 0xFD, 0xFF, 0xA7, 0xC7, 0xC2, 0x1D,
	0x85, 0xF3, 0x80, 0x41, 0x11, 0xA1, 0x04, 0xFA, 0xDE, 0xF7, 0xDE, 0x2F,
	0xFB, 0xBE, 0x11, 0x7E, 0xD9, 0x05, 0xE9, 0x12, 0x25, 0xBB, 0x20, 0x5D,
	0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0xEC, 0x82, 0x74, 0x89, 0x92, 0x5D,
	0x90, 0x2E, 0x51, 0xB2, 0x0B, 0xD2, 0x25, 0x4A, 0x76, 0x41, 0xBA, 0x44,
	0xC9, 0x2E, 0x48, 0x97, 0x28, 0xD9, 0x05, 0xE9, 0x12, 0x25, 0xBB, 0x20,
	0x5D, 0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0xEC, 0x82, 0x74, 0x89, 0x92,
	0x5D, 0x90, 0x2E, 0x51, 0xB2, 0x0B, 0xD2, 0x25, 0x4A, 0x76, 0x41, 0xBA,
	0x44, 0xC9, 0x2E, 0x48, 0x97, 0x28, 0xD9, 0x05, 0xE9, 0x12, 0x25, 0xBB,
	0x20, 0x5D, 0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0xEC, 0x82, 0x74, 0x89,
	0x92, 0x5D, 0x90, 0x2E, 0x51, 0xB2, 0x0B, 0xD2, 0x25, 0x4A, 0x76, 0x41,
	0xBA, 0x44, 0xC9, 0x2E, 0x48, 0x97, 0x28, 0xD9, 0x05, 0xE9, 0x12, 0x25,
	0xBB, 0x20, 0x5D, 0xA2, 0x64, 0x17, 0xA4, 0x4B, 0x94, 0x2D, 0xC7, 0xFF,
	0x54, 0x8E, 0xAC, 0x7A, 0x85, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B,
	0xA1, 0x61, 0xAA, 0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19,
	0x1A, 0xA6, 0x2A, 0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1,
	0x61, 0xAA, 0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A,
	0xA6, 0x2A, 0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61,
	0xAA, 0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6,
	0x2A, 0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA,
	0x42, 0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A,
	0x94, 0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42,
	0xC9, 0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A, 0x94,
	0x6C, 0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42, 0xC9,
	0x66, 0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A, 0x94, 0x6C,
	0x86, 0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42, 0xC9, 0x66,
	0x68, 0x98, 0xAA, 0x50, 0xB2, 0x19, 0x1A, 0xA6, 0x2A, 0x94, 0x6C, 0x86,
	0x86, 0xA9, 0x0A, 0x25, 0x9B, 0xA1, 0x61, 0xAA, 0x42, 0xC9, 0x66, 0x68,
	0x98, 0xAA, 0x50, 0xAE, 0xF7, 0xFE, 0x00, 0x98, 0xAA, 0x23, 0x83, 0x2E,
	0x3C, 0x2C, 0x1B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE,
	0x42, 0x60, 0x82
		};
	};
}
